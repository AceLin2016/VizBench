#include "NosuchDebug.h"
#include "NosuchJson.h"
#include "VizParams.h"

bool VizParams::Initialized = false;

std::map<std::string, StringList> VizParams::StringVals;

int
string2int(std::string s) {
	return atoi(s.c_str());
}

float
string2double(std::string s) {
	return (float)atof(s.c_str());
}

bool
string2bool(std::string s) {
	if (s == "") {
		DEBUGPRINT(("Unexpected empty value in string2bool!?"));
		return false;
	}
	if (s == "true" || s[0] == '1' || s == "on") return true;
	if (s == "false" || s[0] == '0' || s == "off") return false;
	return false;
}

void VizParams::Initialize() {

	if (Initialized) {
		return;
	}

	Initialized = true;

	// Eventually, all this initialization should be autogenerated
	// by genparams.py, based on the contents of the various
	// parameter lists (SpriteVizParams.list, MidiVizParams.list)

	StringVals["shapeTypes"] = StringList();
	StringVals["shapeTypes"].push_back("nothing");  // make sure that index 0 is nothing?
	StringVals["shapeTypes"].push_back("line");
	StringVals["shapeTypes"].push_back("triangle");
	StringVals["shapeTypes"].push_back("square");
	StringVals["shapeTypes"].push_back("hbar");
	StringVals["shapeTypes"].push_back("vbar");
	// StringVals["shapeTypes"].push_back("arc");
	StringVals["shapeTypes"].push_back("circle");
	// StringVals["shapeTypes"].push_back("outline");

	StringVals["mirrorTypes"] = StringList();
	StringVals["mirrorTypes"].push_back("none");
	StringVals["mirrorTypes"].push_back("vertical");
	StringVals["mirrorTypes"].push_back("horizontal");
	StringVals["mirrorTypes"].push_back("four");

	StringVals["scaleTypes"] = StringList();
	Scale::initialize();
	for (const auto &pair : Scale::Scales) {
		StringVals["scaleTypes"].push_back(pair.first);
	}

	StringVals["durationTypes"] = StringList();
	StringVals["durationTypes"].push_back("hold");
	StringVals["durationTypes"].push_back("whole");
	StringVals["durationTypes"].push_back("half");
	StringVals["durationTypes"].push_back("quarter");
	StringVals["durationTypes"].push_back("eighth");
	StringVals["durationTypes"].push_back("sixteenth");
	StringVals["durationTypes"].push_back("thirysecond");

	StringVals["placementTypes"] = StringList();
	StringVals["placementTypes"].push_back("nowhere");
	StringVals["placementTypes"].push_back("center");
	StringVals["placementTypes"].push_back("random");
	StringVals["placementTypes"].push_back("top");
	StringVals["placementTypes"].push_back("bottom");
	StringVals["placementTypes"].push_back("left");
	StringVals["placementTypes"].push_back("right");

	StringVals["logicTypes"] = StringList();
	StringVals["logicTypes"].push_back("none");
	StringVals["logicTypes"].push_back("vertical");
	StringVals["logicTypes"].push_back("horizontal");
	StringVals["logicTypes"].push_back("outline");

	StringVals["behaviourTypes"] = StringList();
	StringVals["behaviourTypes"].push_back("default");
	StringVals["behaviourTypes"].push_back("museum");
	StringVals["behaviourTypes"].push_back("STEIM");
	StringVals["behaviourTypes"].push_back("casual");
	StringVals["behaviourTypes"].push_back("burn");

	StringVals["controllerTypes"] = StringList();
	StringVals["controllerTypes"].push_back("modulationonly");
	StringVals["controllerTypes"].push_back("allcontrollers");
	StringVals["controllerTypes"].push_back("pitchYZ");

	StringVals["movedirTypes"] = StringList();
	StringVals["movedirTypes"].push_back("cursor");
	StringVals["movedirTypes"].push_back("left");
	StringVals["movedirTypes"].push_back("right");
	StringVals["movedirTypes"].push_back("up");
	StringVals["movedirTypes"].push_back("down");
	StringVals["movedirTypes"].push_back("random");

	StringVals["rotangdirTypes"] = StringList();
	StringVals["rotangdirTypes"].push_back("right");
	StringVals["rotangdirTypes"].push_back("left");
	StringVals["rotangdirTypes"].push_back("random");

	StringVals["soundTypes"] = StringList();
	StringVals["soundTypes"].push_back("Bass1");
	StringVals["soundTypes"].push_back("Bass2");
	StringVals["soundTypes"].push_back("Synth1");
	StringVals["soundTypes"].push_back("Synth2");
	StringVals["soundTypes"].push_back("Drum1");
	StringVals["soundTypes"].push_back("Drum2");
}

