1,3c1,38
< #include "NosuchDebug.h"
< #include "NosuchUtil.h"
< #include "ffutil.h"
---
> /*
> 	Space Manifold - a variety of tools for Kinect and FreeFrame
> 
> 	Copyright (c) 2011-2012 Tim Thompson <me@timthompson.com>
> 
> 	Permission is hereby granted, free of charge, to any person obtaining
> 	a copy of this software and associated documentation files
> 	(the "Software"), to deal in the Software without restriction,
> 	including without limitation the rights to use, copy, modify, merge,
> 	publish, distribute, sublicense, and/or sell copies of the Software,
> 	and to permit persons to whom the Software is furnished to do so,
> 	subject to the following conditions:
> 
> 	The above copyright notice and this permission notice shall be
> 	included in all copies or substantial portions of the Software.
> 
> 	Any person wishing to distribute modifications to the Software is
> 	requested to send the modifications to the original developer so that
> 	they can be incorporated into the canonical version.
> 
> 	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
> 	EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
> 	MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
> 	IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR
> 	ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF
> 	CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
> 	WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
> */
> 
> #include <FFGL.h>
> #include <FFGLLib.h>
> #include <stdint.h>
> 
> #include <iostream>
> #include <fstream>
> #include <strstream>
> #include <cstdlib> // for srand, rand
> #include <ctime>   // for time
15c50,51
< #include "Vizlet.h"
---
> #include "NosuchException.h"
> #include "NosuchUtil.h"
17c53,57
< #include "NosuchOsc.h"
---
> #include "NosuchDebug.h"
> 
> #include <pthread.h>
> 
> // #define FFPARAM_BRIGHTNESS (0)
19,20c59,61
< #include "Sprite.h"
< #include "SpaceServer.h"
---
> ////////////////////////////////////////////////////////////////////////////////////////////////////
> //  Plugin information
> ////////////////////////////////////////////////////////////////////////////////////////////////////
23,32c64,73
< 	Pyffle::CreateInstance,	// Create method
< 	"V998",		// Plugin unique ID
< 	"Pyffle",	// Plugin name	
< 	1,			// API major version number
< 	000,		// API minor version number	
< 	1,			// Plugin major version number
< 	000,		// Plugin minor version number
< 	FF_EFFECT,	// Plugin type
< 	"Pyffle: a sample visual synth",	// description
< 	"by Tim Thompson - me@timthompson.com" 			// About
---
> 	Pyffle::CreateInstance,		// Create method
> 	"PY00",						// Plugin unique ID
> 	"Pyffle",					// Plugin name											
> 	1,							// API major version number 													
> 	000,						// API minor version number	
> 	1,							// Plugin major version number
> 	000,						// Plugin minor version number
> 	FF_EFFECT,					// Plugin type
> 	"Pyffle: Python FreeFrame Language Extension",	// Plugin description
> 	"by Tim Thompson - me@timthompson.com" // About
35,36c76
< std::string PyfflePluginName = "dummyname";
< std::string PyfflePublicDir = "dummydir";
---
> bool Pyffle::StaticInitialized = false;
38,39c78
< std::string vizlet_name() { return "Pyffle"; }
< CFFGLPluginInfo& vizlet_plugininfo() { return PluginInfo; }
---
> Pyffle* ThisPyffle = NULL;
41,42c80,92
< Pyffle::Pyffle() : Vizlet() {
< 	DEBUGPRINT(("Pyffle constructor"));
---
> void Pyffle::StaticInitialization()
> {
> 	// Default debugging stuff
> 	// This currently duplicates the values in the definitions, but
> 	// eventually these values should come from an init file
> 
> 	NosuchDebug(1,"Pyffle StaticInitialization!");
> }
> 
> Pyffle::Pyffle() : CFreeFrameGLPlugin()
> {
> 	ThisPyffle = this;
> 	NosuchDebug(1,"Pyffle constructor this=%ld",(long)this);
45a96,97
> 	_dopython = true;
> 	_python_disabled = false;
49,53c101,105
< 	_shutting_down = false;
< 	_dopython = true;
< 	_python_initialized = false;
< 	_python_disabled = false;
< 	_python_disable_on_exception = false;
---
> 	initialized = false;
> 	gl_shutting_down = false;
> 
> 	width = 1.0f;
> 	height = 1.0f;
62a115,116
> 	disabled = false;
> 	disable_on_exception = false;
65,110c119,123
< Pyffle::~Pyffle() {
< }
< 
< DWORD __stdcall Pyffle::CreateInstance(CFreeFrameGLPlugin **ppInstance) {
< 	*ppInstance = new Pyffle();
< 	return (*ppInstance != NULL)? FF_SUCCESS : FF_FAIL;
< }
< 
< void Pyffle::processCursor(SpaceCursor* c, int downdragup) {
< 	// NO OpenGL calls here
< }
< 
< std::string Pyffle::processJson(std::string meth, cJSON *json, const char *id) {
< 	// NO OpenGL calls here
< 	throw NosuchException("Pyffle - Unrecognized method '%s'",meth.c_str());
< }
< 
< void Pyffle::processMidiInput(MidiMsg* m) {
< 	// NO OpenGL calls here
< }
< 
< void Pyffle::processMidiOutput(MidiMsg* m) {
< 	// NO OpenGL calls here
< }
< 
< bool Pyffle::processDraw() {
< 	// OpenGL calls here
< 
< 	if ( _shutting_down ) {
< 		return true;
< 	}
< 
< 	if ( ! _python_initialized ) {
< 		if ( ! python_initStuff() ) {
< 			NosuchDebug("initStuff failed, disabling plugin!");
< 			_python_disabled = true;
< 			return false;
< 		}
< 		_python_initialized = true;
< 	}
< 
< 	return true;
< }
< 
< void Pyffle::processDrawNote(MidiMsg* m) {
< 	// OpenGL calls here
---
> Pyffle::~Pyffle()
> {
> 	NosuchDebug(1,"Pyffle destructor called");
> 	// app_destroy();
> 	gl_shutting_down = true;
113,116d125
< ////////////////////////////////////////////////////////////
< //////////////////// PYTHON STUFF //////////////////////////
< ////////////////////////////////////////////////////////////
< 
122c131
< 		NosuchDebug("Unable to find python function: %s",name);
---
> 		NosuchErrorOutput("Unable to find python function: %s",name);
131c140
< 	python_lock();
---
> 	lock_python();
133c142
< 	python_unlock();
---
> 	unlock_python();
257c266
< 
---
>  
270c279
<   
---
>  
298c307
<   
---
>  
388c397
< 	DEBUGPRINT(("python is being disabled!  msg=%s",msg.c_str()));
---
> 	NosuchErrorOutput("python is being disabled!  msg=%s",msg.c_str());
430c439,468
< bool Pyffle::python_initStuff() {
---
> void Pyffle::_initialize() {
> 	NosuchDebug("Pyffle::_initialize start");
> 	if ( _dopython ) {
> 		if ( ! python_init() ) {
> 			NosuchDebug("python_init failed!");
> 		} else {
> 			NosuchDebug("python_init succeeded!");
> 			NosuchDebug("NosuchDebug python_init succeeded!");
> 		}
> 	}
> }
> 
> #if 0
> bool Pyffle::enable_mmtt()
> {
> 	if ( _mmtt ) {
> 		NosuchDebug("Hey, Pyffle::enableMmtt called when it's already enabled!?");
> 		return true;
> 	}
> 	NosuchDebug("About to call app_create for this=%ld",(long)this);
> 	if ( ThisApp ) {
> 		NosuchDebug("NOT calling app_create because ThisApp is non-NULL");
> 	} else {
> 		app_create(0,NULL);
> 		_mmtt = ThisApp;
> 		app_execute("set_drawmode","{ \"mode\": \"python\" }");
> 	}
> 	return true;
> }
> #endif
432c470
< 	NosuchDebug(2,"_python_initStuff starts");
---
> bool Pyffle::initStuff() {
434c472
< 	// test_stuff();
---
> 	NosuchDebug(2,"initStuff starts");
439,445c477
< 		if ( _dopython ) {
< 			if ( ! python_init() ) {
< 				NosuchDebug("python_init failed!");
< 			} else {
< 				NosuchDebug("python_init succeeded!");
< 			}
< 		}
---
> 		Pyffle::_initialize();
454c486
< 	NosuchDebug(2,"_python_initStuff returns %s\n",r?"true":"false");
---
> 	NosuchDebug(2,"initStuff returns %s\n",r?"true":"false");
457a490,635
> DWORD Pyffle::ProcessOpenGL(ProcessOpenGLStruct *pGL)
> {
> 	if ( gl_shutting_down ) {
> 		return FF_SUCCESS;
> 	}
> 	if ( disabled ) {
> 		return FF_SUCCESS;
> 	}
> 
> 	if ( ! initialized ) {
> 		if ( ! initStuff() ) {
> 			NosuchDebug("initStuff failed, disabling plugin!");
> 			disabled = true;
> 			return FF_FAIL;
> 		}
> 		initialized = true;
> 	}
> 
> #if 0
> 	if ( _mmtt ) {
> 		app_update();
> 	}
> #endif
> 
> #ifdef FRAMELOOPINGTEST
> 	static int framenum = 0;
> 	static bool framelooping = FALSE;
> #endif
> 
> 	if ( _passthru ) {
> 		if (pGL->numInputTextures<1)
> 			return FF_FAIL;
> 
> 		if (pGL->inputTextures[0]==NULL)
> 			return FF_FAIL;
>   
> 		FFGLTextureStruct &Texture = *(pGL->inputTextures[0]);
> 
> 		//bind the texture handle
> 		glBindTexture(GL_TEXTURE_2D, Texture.Handle);
> 	}
> 
> #ifdef DOITINPYTHON
> 	glDisable(GL_TEXTURE_2D); 
> 
> 	glEnable(GL_BLEND); 
> 	glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA); 
> 	glLineWidth((GLfloat)3.0f);
> #endif
> 
> 	bool gotexception = false;
> 	try {
> 		CATCH_NULL_POINTERS;
> 
> 		NosuchDebug(2,"ProcessOpenGL");
> 		if ( _dopython && ! _python_disabled ) {
> 			python_draw();
> 		}
> 	} catch (NosuchException& e ) {
> 		NosuchDebug("NosuchException in python_draw : %s",e.message());
> 		gotexception = true;
> 	} catch (...) {
> 		NosuchDebug("UNKNOWN Exception in python_draw!");
> 		gotexception = true;
> 	}
> 
> 	if ( gotexception && disable_on_exception ) {
> 		NosuchDebug("DISABLING Pyffle due to exception!!!!!");
> 		disabled = true;
> 	}
> 
> #if 0
> 	if ( _mmtt ) {
> 		app_draw();
> 	}
> #endif
> 
> 	glDisable(GL_BLEND); 
> 	glEnable(GL_TEXTURE_2D); 
> 
> #ifdef FRAMELOOPINGTEST
> 	int w = Texture.Width;
> 	int h = Texture.Height;
> #define NFRAMES 300
> 	static GLubyte* pixelArray[NFRAMES];
> 	if ( framelooping ) {
> 		glRasterPos2i(-1,-1);
> 		glDrawPixels(w,h,GL_RGB,GL_UNSIGNED_BYTE,pixelArray[framenum]);
> 		framenum = (framenum+1)%NFRAMES;
> 	} else {
> 		if ( framenum < NFRAMES ) {
> 			pixelArray[framenum] = new GLubyte[w*h*3];
> 			glReadPixels(0,0,w,h,GL_RGB,GL_UNSIGNED_BYTE,pixelArray[framenum]);
> 			framenum++;
> 		} else {
> 			framelooping = TRUE;
> 			framenum = 0;
> 		}
> 	}
> #endif
> 
> 	//disable texturemapping
> 	glDisable(GL_TEXTURE_2D);
> 	
> 	//restore default color
> 	glColor4f(1.f,1.f,1.f,1.f);
> 	
> 	return FF_SUCCESS;
> }
> 
> void Pyffle::lock_python() {
> 	// We don't actually need this, right now, since FreeFrame plugins should never
> 	// be running simultaneously.
> #ifdef PYFFLE_LOCK
> 	PyffleLock(&python_mutex,"python");
> #endif
> }
> 
> void Pyffle::unlock_python() {
> #ifdef PYFFLE_LOCK
> 	PyffleUnlock(&python_mutex,"python");
> #endif
> }
> 
> DWORD Pyffle::GetParameter(DWORD dwIndex)
> {
> 	return FF_FAIL;  // no parameters
> }
> 
> DWORD Pyffle::SetParameter(const SetParameterStruct* pParam)
> {
> 	return FF_FAIL;  // no parameters
> }
> std::string
> PyffleForwardSlash(std::string filepath) {
> 	size_t i;
> 	while ( (i=filepath.find("\\")) != filepath.npos ) {
> 		filepath.replace(i,1,"/");
> 	}
> 	return filepath;
> }
> 
> std::string PyfflePublicDir = "";
> std::string PyfflePluginName = "";
> std::string PyfflePythonDir = "";
> 
470,475c648,717
< void Pyffle::python_lock() {
< 	// We don't actually need this, right now, since FreeFrame plugins should never
< 	// be running simultaneously.
< #ifdef NOSUCH_LOCK
< 	NosuchLock(&python_mutex,"python");
< #endif
---
> extern "C" {
> 
> bool
> ffgl_setdll(std::string dllpath)
> {
> 	// No longer convert entire string to lowercase, because the plugin names are case-sensitive
> 	// dllpath = NosuchToLower(dllpath);
> 
> 	size_t lastslash = dllpath.find_last_of("/\\");
> 	size_t lastunder = dllpath.find_last_of("_");
> 	size_t lastdot = dllpath.find_last_of(".");
> 	std::string suffix = (lastdot==dllpath.npos?"":dllpath.substr(lastdot));
> 
> 	if ( NosuchToLower(suffix) != ".dll"
> 		|| lastslash == dllpath.npos
> 		|| lastunder == dllpath.npos
> 		|| lastdot == dllpath.npos ) {
> 
> 		NosuchDebug("Hey! dll name (%s) isn't of the form */Pyffle_Name.dll, PLUGIN IS NOW DISABLED!",dllpath.c_str());
> 		return FALSE;
> 	}
> 
> 	std::string look_for_prefix = "pyffle_";
> 	int look_for_len = look_for_prefix.size();
> 
> 	std::string dir = dllpath.substr(0,lastslash);
> 	std::string prefix = dllpath.substr(lastslash+1,lastdot-lastslash-1);
> 	if ( NosuchToLower(prefix.substr(0,look_for_len)) != look_for_prefix ) {
> 		NosuchDebug("Hey! plugin name name (%s) isn't of the form */Pyffle_Name.dll, PLUGIN IS NOW DISABLED!",dllpath.c_str());
> 		return FALSE;
> 	}
> 
> 	PyfflePluginName = prefix.substr(look_for_len);  // i.e. remove the pyffle_
> 	size_t i = PyfflePluginName.find("_debug");
> 	if ( i > 0 ) {
> 		PyfflePluginName = PyfflePluginName.substr(0,i);
> 	}
> 	// PyffleDebugPrefix = "Pyffle_"+PyfflePluginName+": ";
> 	PyfflePublicDir = dir;
> 	PyfflePythonDir = dir + "\\python";
> 
> 	NosuchCurrentDir = dir;
> 
> 	NosuchDebugSetLogDirFile(dir,"debug.txt");
> 
> 	NosuchDebug(1,"Setting PyfflePublicDir = %s",PyfflePublicDir.c_str());
> 
> 	struct _stat statbuff;
> 	int e = _stat(PyfflePublicDir.c_str(),&statbuff);
> 	if ( ! (e == 0 && (statbuff.st_mode | _S_IFDIR) != 0) ) {
> 		NosuchDebug("Hey! No directory %s!?",PyfflePublicDir.c_str());
> 		return FALSE;
> 	}
> 
> 	char id[5];
> 	// Compute a hash of the plugin name and use two 4-bit values
> 	// from it to produce the last 2 characters of the unique ID.
> 	// It's possible there will be a collision.
> 	int hash = 0;
> 	for ( const char* p = PyfflePluginName.c_str(); *p!='\0'; p++ ) {
> 		hash += *p;
> 	}
> 	id[0] = 'P';
> 	id[1] = 'Y';
> 	id[2] = 'A' + (hash & 0xf);
> 	id[3] = 'A' + ((hash >> 4) & 0xf);
> 	id[4] = '\0';
> 	PluginInfo.SetPluginIdAndName(id,("Pyffle_"+PyfflePluginName).c_str());
> 
> 	return TRUE;
478,481d719
< void Pyffle::python_unlock() {
< #ifdef NOSUCH_LOCK
< 	NosuchUnlock(&python_mutex,"python");
< #endif
